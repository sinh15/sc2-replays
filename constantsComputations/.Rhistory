install.packages("dplyr")
install.packages("ggplot2")
install.packages("tidyr")
install.packages("knitr", dependencies=TRUE)
library(knitr)
bitrates <- seq(1,6000,by=1)
bppCurve30 <- sapply(bitrates, function(bitrate) (bitrate*1000)/(x*y*30))
bbpCurve48 <- sapply(bitrates, function(bitrate) (bitrate*1000)/(x*y*48))
bbpCurve60 <- sapply(bitrates, function(bitrate) (bitrate*1000)/(x*y*60))
library(tidyr)
curves720 <- data.frame(bitrates, bppCurve30, bbpCurve48, bppCurve60)
curves720 <- gather(curves720, "frames", "bpp", 2:4)
library(ggplot2)
ggplot(curves720, aes(x=bitrates, y=bpp, colour=frames, group=frames)) + geom_line() +
geom_hline(yintercept=0.1) +
scale_x_continuous(breaks=seq(0, 6000, by=500), minor_breaks=seq(0,6000, by=250))
bitrates <- seq(1,6000,by=1)
bppCurve30 <- sapply(bitrates, function(bitrate) (bitrate*1000)/(x*y*30))
x = 1280
y = 720
bppCurve30 <- sapply(bitrates, function(bitrate) (bitrate*1000)/(x*y*30))
bbpCurve48 <- sapply(bitrates, function(bitrate) (bitrate*1000)/(x*y*48))
bbpCurve60 <- sapply(bitrates, function(bitrate) (bitrate*1000)/(x*y*60))
library(tidyr)
curves720 <- data.frame(bitrates, bppCurve30, bbpCurve48, bppCurve60)
curves720 <- gather(curves720, "frames", "bpp", 2:4)
library(ggplot2)
ggplot(curves720, aes(x=bitrates, y=bpp, colour=frames, group=frames)) + geom_line() +
geom_hline(yintercept=0.1) +
scale_x_continuous(breaks=seq(0, 6000, by=500), minor_breaks=seq(0,6000, by=250))
x = 1280
y = 720
bitrate = (x * y * 30 * 0.1)/1000
# bpp = (bitrate * 1000) / (width * height * fps) = BPP
bitrates <- seq(1,6000,by=1)
bppCurve30 <- sapply(bitrates, function(bitrate) (bitrate*1000)/(x*y*30))
bbpCurve48 <- sapply(bitrates, function(bitrate) (bitrate*1000)/(x*y*48))
bbpCurve60 <- sapply(bitrates, function(bitrate) (bitrate*1000)/(x*y*60))
library(tidyr)
curves720 <- data.frame(bitrates, bppCurve30, bbpCurve48, bppCurve60)
library(tidyr)
curves720 <- data.frame(bitrates, bppCurve30, bbpCurve48, bbpCurve60)
curves720 <- gather(curves720, "frames", "bpp", 2:4)
library(ggplot2)
ggplot(curves720, aes(x=bitrates, y=bpp, colour=frames, group=frames)) + geom_line() +
geom_hline(yintercept=0.1) +
scale_x_continuous(breaks=seq(0, 6000, by=500), minor_breaks=seq(0,6000, by=250))
knitr::opts_chunk$set(echo = TRUE, fig.align='center', fig.width=12, fig.height=7)
library(dplyr)
library(tidyr)
library(ggplot2)
params[[1]]
params[[gravity]]
params[['gravity']]
gravity
params[[1]]
params[['bike']]
params[['bike']]
5 * c(1, 2, 3, 4, 5)
5 * (2+0) * c(1,2,3,4,5)
c(10,20,30,40,50)/c(1,2,3,4,5)
747-711
36/1000
0.036*100
x <-   slope: c(3.6, 5.5, 6.5, 7.8, 7.3, 7.6, 7.0, 7.5, 8.5, 8.4, 5.5, 8.0, 7.5, 8.0, 7.6, 9.3, 7.8, 7.6, 10.2)
slope <- c(3.6, 5.5, 6.5, 7.8, 7.3, 7.6, 7.0, 7.5, 8.5, 8.4, 5.5, 8.0, 7.5, 8.0, 7.6, 9.3, 7.8, 7.6, 10.2)
newtons <- 9.81 * (65+8) * slope
newtons
params[['slope']]
params[['airDensity']]
params[['slope']]
slope <- c(3.6, 5.5, 6.5, 7.8, 7.3, 7.6, 7.0, 7.5, 8.5, 8.4, 5.5, 8.0, 7.5, 8.0, 7.6, 9.3, 7.8, 7.6, 10.2)
speed <- c(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10)
altimeter<- c(711, 747, 800, 865, 943, 1016, 1086, 1156, 1231, 1316, 1400, 1455, 1535, 1610, 1690, 1766, 1859, 1937, 2013, 2115)
newtons <- round(params[['gravity']] * (params[['rider']]+params[['bike']]) * slope
speed*speed/params[['kmhMs']]/params[['kmhMs']]
speed*speed/params[['kmhMs']]/params[['kmhMs']]
speed*speed
y <- speed*speed
z <- y/prams[['kmhMs']]
z <- y/params[['kmhMs']]
z
100/3.6
27.777778/3.6
(params[['rider']]+params[['bike']]) * params[['gravity']] * params[['coefRodadura']] / speed
gForce <- round(params[['gravity']] * (params[['rider']]+params[['bike']]) * slope)
aerForce <- 0.5 * params[['scx']] * params[['airDensity']] * (speed*speed/params[['kmhMs']]/params[['kmhMs']])
surForce <- (params[['rider']]+params[['bike']]) * params[['gravity']] * params[['coefRodadura']] / speed
gForce+aerForce+surForce
x <- gForce+aerForce+surForce
x
x * c(1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,2)
speed/params[['kmhMs']]
wattage <- (gForce+aerForce+surForce) * (speed/params[['kmhMs']])
wattage
wattage <- round( (gForce+aerForce+surForce) * (speed/params[['kmhMs']]), digits=2)
wattage
wattage <- round((gForce+aerForce+surForce) * (speed/params[['kmhMs']]))
wattage
slope <- c(3.6, 5.5, 6.5, 7.8, 7.3, 7.6, 7.0, 7.5, 8.5, 8.4, 5.5, 8.0, 7.5, 8.0, 7.6, 9.3, 7.8, 7.6, 10.2)
speed <- c(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10)
altimeter<- c(711, 747, 800, 865, 943, 1016, 1086, 1156, 1231, 1316, 1400, 1455, 1535, 1610, 1690, 1766, 1859, 1937, 2013, 2115)
gForce <- round(params[['gravity']] * (params[['rider']]+params[['bike']]) * slope)
aerForce <- 0.5 * params[['scx']] * params[['airDensity']] * (speed*speed/params[['kmhMs']]/params[['kmhMs']])
surForce <- (params[['rider']]+params[['bike']]) * params[['gravity']] * params[['coefRodadura']] / speed
gForce
aerForce
surForce
?data.frame
climb <- data.frame(rbind(1:length(slope), wattage, slope*100, altimeter))
length(slope)
1:19
diff(altimeter)
climb <- data.frame(rbind(1:length(slope), wattage, slope, diff(altimeter)))
View(climb)
climb <- data.frame(cbind(1:length(slope), wattage, slope, diff(altimeter)))
View(climb)
climb <- data.frame(km=cbind(1:length(slope), wattage, slope, alt=diff(altimeter)))
View(climb)
climb <- data.frame(cbind(1:length(slope), wattage, slope, diff(altimeter)), row.names=c('km', 'wattage', 'slope', 'alt'))
climb <- data.frame(cbind(1:length(slope), wattage, slope, diff(altimeter)))
names(clibm) <- c('km', 'wattage', 'slope', 'alt')
climb <- data.frame(cbind(1:length(slope), wattage, slope, diff(altimeter)))
names(climb) <- c('km', 'wattage', 'slope', 'alt')
View(climb)
ggplot(climb, aes(x=km, y=alt, group=1)) + geom_line() + geom_point(size=2)
ggplot(climb, aes(x=km, y=alt, group=1)) + geom_bar(stat='identity')
ggplot(climb, aes(x=km, y=alt, group=1, fill=slope)) + geom_bar(stat='identity', width=1)
ggplot(climb, aes(x=km, y=alt, group=1, colour=slope)) + geom_line(stat='identity', width=1)
ggplot(climb, aes(x=km, y=alt, group=1, colour=slope)) + geom_line()
ggplot(climb, aes(x=km, y=alt, group=1, colour=slope)) + geom_bar(stat='identity', width=0.9)
ggplot(climb, aes(x=km, y=alt, group=1, fill=slope)) + geom_bar(stat='identity', width=0.9)
ggplot(climb, aes(x=as.factor(km), y=alt, group=1, fill=slope)) + geom_bar(stat='identity', width=0.9)
ggplot(climb, aes(x=as.factor(km), y=(altimeter[1]+alt), group=1, fill=slope)) +
geom_bar(stat='identity', width=0.9)
ggplot(climb, aes(x=as.factor(km), y=alt, group=1, fill=slope)) +
geom_bar(stat='identity', width=0.9)
ggplot(climb, aes(x=as.factor(km), y=alt, group=1, fill=slope)) +
geom_bar(stat='identity', width=0.9) +
scale_y_continuous(limits=c(0, max(climb$alt+10)))
ggplot(climb, aes(x=as.factor(km), y=alt, group=1, fill=slope)) +
geom_bar(stat='identity', width=0.9) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
slope <- c(3.6, 5.5, 6.5, 7.8, 7.3, 7.6, 7.0, 7.5, 8.5, 8.4, 5.5, 8.0, 7.5, 8.0, 7.6, 9.3, 7.8, 7.6, 10.2)/100
speed <- c(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8)
altimeter <- c(711, 747, 800, 865, 943, 1016, 1086, 1156, 1231, 1316, 1400, 1455, 1535, 1610, 1690, 1766, 1859, 1937, 2013, 2115)
gForce <- round(params[['gravity']] * (params[['rider']]+params[['bike']]) * slope)
aerForce <- 0.5 * params[['scx']] * params[['airDensity']] * (speed*speed/params[['kmhMs']]/params[['kmhMs']])
surForce <- (params[['rider']]+params[['bike']]) * params[['gravity']] * params[['coefRodadura']] / speed
wattage <- round((gForce+aerForce+surForce) * (speed/params[['kmhMs']]))
wattage
climb <- data.frame(cbind(1:length(slope), wattage, slope, diff(altimeter)))
names(climb) <- c('km', 'wattage', 'slope', 'alt')
ggplot(climb, aes(x=as.factor(km), y=alt, group=1, fill=slope)) +
geom_bar(stat='identity', width=0.9) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
library(ggplot2)
today()
today
Sys.Date()
knitr::opts_chunk$set(echo = TRUE)
ggplot(climb, aes(x=as.factor(km), y=alt, group=1)) +
geom_line() + geom_point(size=2) + geom_area(aes(fill=slope)) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
slope <- c(3.6, 5.5, 6.5, 7.8, 7.3, 7.6, 7.0, 7.5, 8.5, 8.4, 5.5, 8.0, 7.5, 8.0, 7.6, 9.3, 7.8, 7.6, 10.2)/100
speed <- c(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8)
altimeter <- c(711, 747, 800, 865, 943, 1016, 1086, 1156, 1231, 1316, 1400, 1455, 1535, 1610, 1690, 1766, 1859, 1937, 2013, 2115)
gForce <- round(params[['gravity']] * (params[['rider']]+params[['bike']]) * slope)
aerForce <- 0.5 * params[['scx']] * params[['airDensity']] * (speed*speed/params[['kmhMs']]/params[['kmhMs']])
surForce <- (params[['rider']]+params[['bike']]) * params[['gravity']] * params[['coefRodadura']] / speed
wattage <- round((gForce+aerForce+surForce) * (speed/params[['kmhMs']]))
climb <- data.frame(cbind(1:length(slope), wattage, slope, diff(altimeter), speed))
names(climb) <- c('km', 'wattage', 'slope', 'alt', 'speed')
plot <- ggplot(climb, aes(x=as.factor(km), y=alt, group=1, fill=slope)) +
geom_bar(stat='identity', width=0.9) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
for(i in c(1:length(climb$km))) {
plot <- plot +
annotate(geom='text', x=as.factor(climb[i, 'km']), y=(climb[i, 'alt']+3), label=paste(climb[i, 'speed'], 'km/h')) +
annotate(geom='text', x=as.factor(climb[i, 'km']), y=(climb[i, 'alt']+7), label=paste(climb[i, 'wattage'], 'w')) +
annotate(geom='text', x=as.factor(climb[i, 'km']), y=3, label=paste0(round(climb[i, 'slope']*100, digits=1), '%'), colour='white')
}
print(plot)
ggplot(climb, aes(x=as.factor(km), y=alt, group=1)) +
geom_line() + geom_point(size=2) + geom_area(aes(fill=slope)) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
ggplot(climb, aes(x=as.factor(km), y=alt)) +
geom_line() + geom_point(size=2) + geom_area(aes(fill=slope)) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
ggplot(climb, aes(x=as.factor(km), y=alt, group=1)) +
geom_line() + geom_point(size=2) + geom_area(aes(fill=slope)) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
ggplot(climb, aes(x=as.factor(km), y=alt)) +
geom_line() + geom_point(size=2) + geom_area(aes(fill=slope)) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
names(climb)
ggplot(climb, aes(x=as.factor(km), y=alt, group=km)) +
geom_line() + geom_point(size=2) + geom_area(aes(fill=slope)) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
ggplot(climb, aes(x=as.factor(km), y=alt, group=1)) +
geom_line() + geom_point(size=2) + geom_area(aes(fill=slope)) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
ggplot(climb, aes(x=as.factor(km), y=alt, group=1, colour=slope)) +
geom_line() + geom_point(size=2) + geom_area(aes(fill=slope)) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
ggplot(climb, aes(x=as.factor(km), y=alt, group=1, fill=slope)) +
geom_line() + geom_point(size=2) + geom_area(aes(fill=slope)) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
ggplot(climb, aes(x=as.factor(km), y=alt, group=1, fill=slope)) +
geom_line() + geom_point(size=2) + geom_area() +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
ggplot(climb, aes(x=as.factor(km), y=alt, fill=slope)) +
geom_line() + geom_point(size=2) + geom_area() +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
ggplot(climb, aes(x=as.factor(km), y=alt, colour=slope)) +
geom_line() + geom_point(size=2) + geom_area() +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
names(climb)
ggplot(climb, aes(x=as.factor(km), y=alt, group=alt)) +
geom_line() + geom_point(size=2) + geom_area() +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
ggplot(climb, aes(x=as.factor(km), y=alt, group=slope)) +
geom_line() + geom_point(size=2) + geom_area() +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
ggplot(climb, aes(x=as.factor(km), y=alt, group=1)) +
geom_line() + geom_point(size=2) + geom_area() +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
ggplot(climb, aes(x=as.factor(km), y=alt, group=1)) +
geom_line() + geom_point(size=2) + geom_area(aes(fill=slope)) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
ggplot(climb, aes(x=as.factor(km), y=alt, group=1)) +
geom_line() + geom_point(size=2) + geom_area(aes(fill=1)) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
ggplot(climb, aes(x=as.factor(km), y=alt, group=1, colour=slope)) +
geom_line() + geom_point(size=2) + geom_area(aes(fill=slope)) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
ggplot(climb, aes(x=as.factor(km), y=alt, group=1, colour=slope)) +
geom_line() + geom_point(size=2) + geom_area(aes(fill=1)) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
ggplot(climb, aes(x=as.factor(km), y=alt, group=1, fill=slope)) +
geom_line() + geom_point(size=2) + geom_area(aes(fill=1)) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
ggplot(climb, aes(x=as.factor(km), y=alt, group=1, fill=slope)) +
geom_line() + geom_point(size=2) + geom_area(aes(fill=slope)) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
ggplot(climb, aes(x=as.factor(km), y=alt, group=1)) +
geom_line() + geom_point(size=2) + geom_area(aes(fill=1)) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
ggplot(climb, aes(x=km, y=alt, group=1)) +
geom_line() + geom_point(size=2) + geom_area(aes(fill=1)) +
scale_y_continuous(limits=c(0, max(climb$alt+10))) +
ggtitle('Col du Tourmalet wattage consumption') +
theme(plot.title=element_text(size=22, face='bold', hjust=0.5))
setwd("~/github/sc2-replays/constantsComputations")
# Load jsonlite library
require(jsonlite)
# @fps -> will contain each game data: ID, Duration (seconds), Last Frame
periodic <- data.frame()
# iterate to 50 pages (10 games per page = 500 games)
numPages <- 50
for(i in 1:numPages) {
# get basic details of last 10 games paginated by variable 'i' and extract ids & durations
apiURI <- paste0('http://api.ggtracker.com/api/v1/matches?category=Ladder&game_type=1v1&page=', i)
gamesJSON <- fromJSON(apiURI)
games <- gamesJSON[['collection']]
gameIDS <- games[['id']]
durations <- games[['duration_seconds']]
# iterate through each game of the page
for(j in 1:length(gameIDS)) {
# delay call + extract details to not crash the API
Sys.sleep(0.5)
advURI <- paste0('https://gg2-matchblobs-prod.s3.amazonaws.com/', gameIDS[j])
advJSON <- fromJSON(advURI)
spaces <- length(adJSON[['Lost']][[1]])
# Compute the minimum & maximum seconds range for the space
### Max: (spaces-1)X = duration + X -> X = duration/(spaces-2)
### Min: (spaces-1)X = duration - X -> X = duration/spaces
spaceMax <- durations[j]/(spaces-2)
spaceMin <- durations[j]/spaces
# storde data in overall data frame FPS
gameData <- as.data.frame(matrix(c(gameIDS[j], durations[j], spaceMin, spaceMax), ncol=4))
periodic <<- rbind(periodic, gameData)
# paste progress in console
current <- (i-1)*10+j
max <- numPages*length(gameIDS)
message(paste0('Completed ', current, ' of ', max, ' : ', round(current/max*100, digits=0), '%'), appendLF=TRUE)
flush.console()
}
}
require(jsonlite)
# @fps -> will contain each game data: ID, Duration (seconds), Last Frame
periodic <- data.frame()
# iterate to 50 pages (10 games per page = 500 games)
numPages <- 50
for(i in 1:numPages) {
# get basic details of last 10 games paginated by variable 'i' and extract ids & durations
apiURI <- paste0('http://api.ggtracker.com/api/v1/matches?category=Ladder&game_type=1v1&page=', i)
gamesJSON <- fromJSON(apiURI)
games <- gamesJSON[['collection']]
gameIDS <- games[['id']]
durations <- games[['duration_seconds']]
# iterate through each game of the page
for(j in 1:length(gameIDS)) {
# delay call + extract details to not crash the API
Sys.sleep(0.5)
advURI <- paste0('https://gg2-matchblobs-prod.s3.amazonaws.com/', gameIDS[j])
advJSON <- fromJSON(advURI)
spaces <- length(adJSON[['Lost']][[1]])
# Compute the minimum & maximum seconds range for the space
### Max: (spaces-1)X = duration + X -> X = duration/(spaces-2)
### Min: (spaces-1)X = duration - X -> X = duration/spaces
spaceMax <- durations[j]/(spaces-2)
spaceMin <- durations[j]/spaces
# storde data in overall data frame FPS
gameData <- as.data.frame(matrix(c(gameIDS[j], durations[j], spaceMin, spaceMax), ncol=4))
periodic <<- rbind(periodic, gameData)
# paste progress in console
current <- (i-1)*10+j
max <- numPages*length(gameIDS)
message(paste0('Completed ', current, ' of ', max, ' : ', round(current/max*100, digits=0), '%'), appendLF=TRUE)
flush.console()
}
}
require(jsonlite)
# @fps -> will contain each game data: ID, Duration (seconds), Last Frame
periodic <- data.frame()
# iterate to 50 pages (10 games per page = 500 games)
numPages <- 50
for(i in 1:numPages) {
# get basic details of last 10 games paginated by variable 'i' and extract ids & durations
apiURI <- paste0('http://api.ggtracker.com/api/v1/matches?category=Ladder&game_type=1v1&page=', i)
gamesJSON <- fromJSON(apiURI)
games <- gamesJSON[['collection']]
gameIDS <- games[['id']]
durations <- games[['duration_seconds']]
# iterate through each game of the page
for(j in 1:length(gameIDS)) {
# delay call + extract details to not crash the API
Sys.sleep(0.5)
advURI <- paste0('https://gg2-matchblobs-prod.s3.amazonaws.com/', gameIDS[j])
advJSON <- fromJSON(advURI)
spaces <- length(advJSON[['Lost']][[1]])
# Compute the minimum & maximum seconds range for the space
### Max: (spaces-1)X = duration + X -> X = duration/(spaces-2)
### Min: (spaces-1)X = duration - X -> X = duration/spaces
spaceMax <- durations[j]/(spaces-2)
spaceMin <- durations[j]/spaces
# storde data in overall data frame FPS
gameData <- as.data.frame(matrix(c(gameIDS[j], durations[j], spaceMin, spaceMax), ncol=4))
periodic <<- rbind(periodic, gameData)
# paste progress in console
current <- (i-1)*10+j
max <- numPages*length(gameIDS)
message(paste0('Completed ', current, ' of ', max, ' : ', round(current/max*100, digits=0), '%'), appendLF=TRUE)
flush.console()
}
}
View(periodic)
summary(periodic)
View(periodic[periodic$V3 > 7.5, ])
# Load jsonlite library
require(jsonlite)
# @fps -> will contain each game data: ID, Duration (seconds), Last Frame
periodic <- data.frame()
# iterate to 50 pages (10 games per page = 500 games)
numPages <- 50
for(i in 1:numPages) {
# get basic details of last 10 games paginated by variable 'i' and extract ids & durations
apiURI <- paste0('http://api.ggtracker.com/api/v1/matches?category=Ladder&game_type=1v1&page=', i)
gamesJSON <- fromJSON(apiURI)
games <- gamesJSON[['collection']]
gameIDS <- games[['id']]
durations <- games[['duration_seconds']]
# iterate through each game of the page
for(j in 1:length(gameIDS)) {
# delay call + extract details to not crash the API
Sys.sleep(0.5)
advURI <- paste0('https://gg2-matchblobs-prod.s3.amazonaws.com/', gameIDS[j])
advJSON <- fromJSON(advURI)
spaces <- length(advJSON[['Lost']][[1]])
# Compute the minimum & maximum seconds range for the space
### Max: (spaces-1)X = duration + X -> X = duration/(spaces-2)
### Min: (spaces-1)X = duration - X -> X = duration/spaces
spaceMax <- durations[j]/(spaces-2)
spaceMin <- durations[j]/spaces
# storde data in overall data frame FPS
gameData <- as.data.frame(matrix(c(gameIDS[j], durations[j], spaces), ncol=3))
periodic <<- rbind(periodic, gameData)
# paste progress in console
current <- (i-1)*10+j
max <- numPages*length(gameIDS)
message(paste0('Completed ', current, ' of ', max, ' : ', round(current/max*100, digits=0), '%'), appendLF=TRUE)
flush.console()
}
}
read.csv(file='fps500Games.csv')
View(periodic)
names(periodic) <- c('id', 'duration', 'spaces')
write.csv(periodic, file='periodicMetrics.csv')
periodic$durationModified <- periodic$duration-3.5
periodicMin <- periodic$duration/periodic$spaces
periodicMax <- periodic$duration/(periodic$spaces-2)
periodicMinM <- periodic$durationModified/periodic$spaces
periodicMaxM <- periodic$durationModified/(periodic$spaces-2)
smmary(periodic)
summary(periodic)
periodic$min <- periodic$duration/periodic$spaces
periodic$max <- periodic$duration/(periodic$spaces-2)
periodic$minM <- periodic$durationModified/periodic$spaces
periodic$maxM <- periodic$durationModified/(periodic$spaces-2)
summary(periodic)
?quantile
quantile(summary$max, 0.9)
quantile(summary$max, probs=0.9)
quantile(periodic$max, 0.9)
quantile(periodic$max, 0.99)
quantile(periodic$max, 0.95)
periodic2 <- periodic[periodic$max < quantile(periodic$max, 0.95), ]
summary(periodic2)
0.046*100
0.046*300
7.053-7.046
(7.053-7)*300
(7.053-7)*300
(7.053-7.046)*300
300*7
300*7/60
(7.053-7.046)*500
(7.053-7.046)*100
(7.053-7.046)*1000
1000*7.05
1000*7.05/60
1/0.05
20*7
summary(periodic)
728/140
744
10*2
744*2+1
